---
import { Image } from "astro:assets";
import code from "../../public/images/code.png"
import dropDown from "../../public/images/arrow.png"
---
<nav class="bg-black sticky top-0 flex justify-evenly overflow-visible h-[70px] p-4">

    <div class="flex flex-1 items-center">
        <Image src={code} alt="_logo" format="webp" quality={10} class="m-auto w-8">
    </div>

    <div class="flex flex-auto justify-center gap-4 items-center max-md:hidden">
        <div class="p-3 flex justify-center gap-4">
        <a href="#home" id="homeLink" class="menu p-2 hover:border-b-white hover:border-b-3 text-gray-400 text-[15px]">Home</a>
        <a href="#skills" id="skillsLink" class="menu p-2 text-gray-400  text-[15px] hover:border-b-white hover:border-b-3">Skills</a>
        <a href="#about" id="aboutLink" class="menu p-2 text-gray-400  text-[15px] hover:border-b-white hover:border-b-3">About</a>
        <a href="#contact" id="contactLink" class="menu p-2 text-gray-400  text-[15px] hover:border-b-white hover:border-b-3">Contact</a>
        </div>
    </div>

    <div class="flex flex-col items-center translate-y-1/2 flex-1 gap-4 md:pointer-events-none md:opacity-0 m-4">
        <img id="drop" alt="_dropDown" class="drop -translate-y-1/2 translate-x-[50px] w-8" src="/images/arrow.png">
       <div id="links" class="hidden flex-col w-[110px] translate-x-[50px] text-center gap-2 -translate-y-1/6">
        <a href="#home" class="menu p-1 rounded-full border-1 border-black text-gray-400" id="homeLinkb">Home</a>
        <a href="#skills" class="menu p-1 rounded-full text-gray-400 border-1 border-black" id="skillsLinkb">Skills</a>
        <a href="#about" class="menu p-1 rounded-full text-gray-400 border-1 border-black" id="aboutLinkb">About</a>
        <a href="#contact" class="menu p-1 rounded-full text-gray-400 border-1 border-black" id="contactLinkb">Contact</a>
       </div>
    </div>
</nav>

<script>
    import {animate, hover, press} from "motion"

    hover(".menu", (element) => {
        animate(element, { y: -1 }, { duration: 0.1 })

        return () => animate(element, { y: 0 })
    })

     press(".drop", (element) => {
        animate(element, { scale: 0.8 }, { type: "spring", stiffness: 150})

        return () =>
            animate(element, { scale: 1 }, { type: "spring", stiffness: 150 })
    })

    let toggle = false;
    const click = document.getElementById("drop");
    const menu = document.getElementById("links");

   if (click && menu != null){
     click.addEventListener('click', ()=> {
        toggle = !toggle

        if(toggle) {
            menu.classList.remove("hidden");
            menu.classList.add("flex", "drop-down");
        }

        else{
            menu.classList.remove("flex", "drop-down");
            menu.classList.add("hidden");
        }
 }

    );

    menu.addEventListener('mouseleave', () => {
            toggle = false;
            menu.classList.remove("flex");
            menu.classList.add("hidden");
    })
   } 
   

    let mq = window.innerWidth;

    const observe = () => {
        mq = window.innerWidth;

  const observer = new IntersectionObserver((entry)=> {
            entry.forEach((e)=>{
            const text = document.getElementById(`${e.target.id}Link`);
            const textb = document.getElementById(`${e.target.id}Linkb`);

                if(e.isIntersecting && text != null && mq > 768){

                    text.classList.remove("text-gray-400");
                    text.classList.add("text-white")

                }
                else if(!e.isIntersecting && text != null && mq > 768){
                    text.classList.remove("text-white");
                    text.classList.add("text-gray-400")
                }
                else if(e.isIntersecting && textb != null && mq < 768){

                    textb.classList.remove("bg-black");
                    textb.classList.add("bg-white");
                    textb.classList.add("text-black");
                    textb.classList.remove("text-gray-400");

                }
                else if(!e.isIntersecting && textb != null && mq < 768){
                    textb.classList.remove("bg-white");
                    textb.classList.add("bg-black");
                    textb.classList.remove("text-black");
                    textb.classList.add("text-gray-400");
                }
            }, {threshold: 0.5});
        });
        
        const home = document.getElementById("home");
        const skills = document.getElementById("skills");
        const about = document.getElementById("about");
        const contact = document.getElementById("contact");

        const sections = [home, skills, about, contact];
        sections.forEach((section)=>{
           if (section != null){
              observer.observe(section);
           }
        });
         }
    window.addEventListener("resize", observe);
    window.addEventListener("DOMContentLoaded", observe);

</script>